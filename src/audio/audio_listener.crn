
AudioListenerFunctions: type = $() {

    setPosition: fun = (x: f32, y: f32, z: f32) {
        jsFun("(audioRef, x, y, z) => {" +
            "const listener = getJsRef(audioRef).listener;" +
            "if(\"positionX\" in listener && \"positionY\" in listener && \"positionZ\" in listener) {" +
                "listener.positionX.value = x;" +
                "listener.positionY.value = y;" +
                "listener.positionZ.value = z;" +
            "} else listener.setPosition(x, y, z);" +
        "}")(_bAudioContext, x, y, z);
    };

    setOrientation: fun = (lookX: f32, lookY: f32, lookZ: f32, upX: f32, upY: f32, upZ: f32) {
        jsFun("(audioRef, lookX, lookY, lookZ, upX, upY, upZ) => {" +
            "const listener = getJsRef(audioRef).listener;" +
            "if(\"forwardX\" in listener && \"forwardY\" in listener && \"forwardZ\" in listener && \"upX\" in listener && \"upY\" in listener && \"upZ\" in listener) {" +
                "listener.forwardX.value = lookX;" +
                "listener.forwardY.value = lookY;" +
                "listener.forwardZ.value = lookZ;" +
                "listener.upX.value = upX;" +
                "listener.upY.value = upY;" +
                "listener.upZ.value = upZ;" +
            "} else listener.setOrientation(lookX, lookY, lookZ, upX, upY, upZ);" +
        "}")(_bAudioContext, lookX, lookY, lookZ, upX, upY, upZ);
    };

};

AudioListener: AudioListenerFunctions = AudioListenerFunctions();